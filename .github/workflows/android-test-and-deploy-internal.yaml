name: android-test-and-deploy-internal
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Android
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
        # Setup environment
      - name: Java - setup SDK
        uses: actions/setup-java@v5
        with:
          distribution: "zulu"
          java-version: "21.x"
          cache: gradle
      - name: Flutter - setup SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
        # Fetch dependencies and generate code
        ## packages
        ### theming
      - name: theming - fetch dependencies
        working-directory: ./packages/theming
        run: flutter pub get
      - name: theming - generate code using build_runner
        working-directory: ./packages/theming
        run: dart run build_runner build
        ### misc_utils
      - name: misc_utils - fetch dependencies
        working-directory: ./packages/misc_utils
        run: flutter pub get
      - name: misc_utils - generate code using build_runner
        working-directory: ./packages/misc_utils
        run: dart run build_runner build
        ## pile_of_shame
      - name: pile_of_shame - fetch dependencies
        run: flutter pub get
      - name: pile_of_shame - generate Localizations
        run: flutter gen-l10n
      - name: pile_of_shame - generate code using build_runner
        run: dart run build_runner build
        # Prepare for build signing
      - name: Android App-Signing - prepare secrets directory
        run: mkdir -p secrets
      - name: Android App-Signing - insert secret upload keystore
        run: echo -n "${{secrets.UPLOAD_KEYSTORE_BASE64}}" | base64 --decode > ./secrets/upload-keystore.jks
      - name: Android App-Signing - insert secret key properties
        run: echo -n "${{secrets.KEY_PROPERTIES_BASE64}}" | base64 --decode > ./android/key.properties
      - name: Flutter - build application
        run: flutter build appbundle --release
      - name: Upload app artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-build-release
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 5
      - name: Prepare native debug symbols
        run: zip -r native-debug-symbols.zip arm64-v8a armeabi-v7a x86_64
        working-directory: build/app/intermediates/merged_native_libs/release/out/lib
      - name: move debug-symbols to android directory
        run: mv build/app/intermediates/merged_native_libs/release/out/lib/native-debug-symbols.zip android/native-debug-symbols.zip
      - name: Upload debug symbol artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-native-debug-symbols
          path: android/native-debug-symbols.zip
          retention-days: 5
      - name: Upload mapping artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-mapping
          path: build/app/outputs/mapping/release/mapping.txt
          retention-days: 5
  deploy_to_google_play:
    needs: build
    runs-on: ubuntu-latest
    environment: Deployment
    steps:
      - uses: actions/checkout@v5
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
      - name: Prepare secrets directory
        run: mkdir -p secrets
      - name: Prepare Google-Play secrets
        run: echo -n "${{secrets.GOOGLE_PLAY_SECRETS_BASE64}}" | base64 --decode > ./secrets/google-play-secrets.json
      - name: Setup directory structure
        run: mkdir -p build/app/outputs/bundle/release/
      - name: Restore built app
        uses: actions/download-artifact@v4
        with:
          name: app-build-release
          path: build/app/outputs/bundle/release/
      - name: Restore debug symbols
        uses: actions/download-artifact@v4
        with:
          name: app-native-debug-symbols
          path: android/
      - name: Restore mapping
        uses: actions/download-artifact@v4
        with:
          name: app-mapping
          path: android/
      - name: Fastlane - install fastlane
        run: bundle install
        working-directory: android
      - name: Fastlane - deploy internal app
        run: bundle exec fastlane internal
        working-directory: android